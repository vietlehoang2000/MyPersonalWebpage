{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { document } from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useEffect, useState, useMemo } from 'react';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  container: PropTypes.object,\n  label: PropTypes.string\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\nfunction FullscreenControl(props) {\n  var _useMapControl = useMapControl(props),\n    context = _useMapControl.context,\n    containerRef = _useMapControl.containerRef;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFullscreen = _useState2[0],\n    setIsFullscreen = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showButton = _useState4[0],\n    setShowButton = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    mapboxFullscreenControl = _useState6[0],\n    createMapboxFullscreenControl = _useState6[1];\n  useEffect(function () {\n    var control = new mapboxgl.FullscreenControl();\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n    var onFullscreenChange = function onFullscreenChange() {\n      var nextState = !control._fullscreen;\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n    return function () {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n  var onClickFullscreen = function onClickFullscreen() {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  if (!showButton) {\n    return null;\n  }\n  var className = props.className,\n    label = props.label;\n  var type = isFullscreen ? 'shrink' : 'fullscreen';\n  return React.createElement(\"div\", {\n    style: style,\n    className: className\n  }, React.createElement(\"div\", {\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-group\",\n    ref: containerRef\n  }, React.createElement(\"button\", {\n    key: type,\n    className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n    type: \"button\",\n    title: label,\n    onClick: onClickFullscreen\n  }, React.createElement(\"span\", {\n    className: \"mapboxgl-ctrl-icon\",\n    \"aria-hidden\": \"true\"\n  }))));\n}\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\nexport default React.memo(FullscreenControl);","map":{"version":3,"names":["document","PropTypes","React","useEffect","useState","useMemo","mapboxgl","useMapControl","mapControlDefaultProps","mapControlPropTypes","propTypes","Object","assign","className","string","style","object","container","label","defaultProps","FullscreenControl","props","_useMapControl","context","containerRef","_useState","_useState2","_slicedToArray","isFullscreen","setIsFullscreen","_useState3","_useState4","showButton","setShowButton","_useState5","_useState6","mapboxFullscreenControl","createMapboxFullscreenControl","control","_checkFullscreenSupport","onFullscreenChange","nextState","_fullscreen","addEventListener","_fullscreenchange","removeEventListener","onClickFullscreen","_container","_onClickFullscreen","_objectSpread","position","type","createElement","ref","key","concat","title","onClick","memo"],"sources":["../../../src/components/fullscreen-control.js"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useEffect, useState, useMemo} from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n  const [mapboxFullscreenControl, createMapboxFullscreenControl] = useState(null);\n\n  useEffect(() => {\n    const control = new mapboxgl.FullscreenControl();\n\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    const onFullscreenChange = () => {\n      const nextState = !control._fullscreen;\n      // this is a hack\n      // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n\n    return () => {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  const onClickFullscreen = () => {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  const {className, label} = props;\n  const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n  return (\n    <div style={style} className={className}>\n      <div className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key={type}\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n          type=\"button\"\n          title={label}\n          onClick={onClickFullscreen}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\n\nexport default React.memo(FullscreenControl);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}