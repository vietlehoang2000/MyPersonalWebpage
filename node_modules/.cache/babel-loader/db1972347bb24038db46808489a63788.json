{"ast":null,"code":"import _objectSpread from \"/Users/vietle/Documents/personal-project/MyPersonalWebpage/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/vietle/Documents/personal-project/MyPersonalWebpage/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { lerp } from './math-utils';\nimport { scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat } from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\nvar EPSILON = 0.01;\nvar VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\nvar DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n};\nexport default function flyToViewport(startProps, endProps, t, options) {\n  var _getFlyToTransitionPa = getFlyToTransitionParams(startProps, endProps, options),\n    startZoom = _getFlyToTransitionPa.startZoom,\n    startCenterXY = _getFlyToTransitionPa.startCenterXY,\n    uDelta = _getFlyToTransitionPa.uDelta,\n    w0 = _getFlyToTransitionPa.w0,\n    u1 = _getFlyToTransitionPa.u1,\n    S = _getFlyToTransitionPa.S,\n    rho = _getFlyToTransitionPa.rho,\n    rho2 = _getFlyToTransitionPa.rho2,\n    r0 = _getFlyToTransitionPa.r0;\n  if (u1 < EPSILON) {\n    var viewport = {};\n    var _iterator = _createForOfIteratorHelper(VIEWPORT_TRANSITION_PROPS),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var startValue = startProps[key];\n        var endValue = endProps[key];\n        viewport[key] = lerp(startValue, endValue, t);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return viewport;\n  }\n  var s = t * S;\n  var w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  var u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;\n  var scaleIncrement = 1 / w;\n  var newZoom = startZoom + scaleToZoom(scaleIncrement);\n  var newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n  var newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\nexport function getFlyToDuration(startProps, endProps, options) {\n  var opts = _objectSpread(_objectSpread({}, DEFAULT_OPTS), options);\n  var screenSpeed = opts.screenSpeed,\n    speed = opts.speed,\n    maxDuration = opts.maxDuration;\n  var _getFlyToTransitionPa2 = getFlyToTransitionParams(startProps, endProps, opts),\n    S = _getFlyToTransitionPa2.S,\n    rho = _getFlyToTransitionPa2.rho;\n  var length = 1000 * S;\n  var duration;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\nfunction getFlyToTransitionParams(startProps, endProps, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  var rho = opts.curve;\n  var startZoom = startProps.zoom;\n  var startCenter = [startProps.longitude, startProps.latitude];\n  var startScale = zoomToScale(startZoom);\n  var endZoom = endProps.zoom;\n  var endCenter = [endProps.longitude, endProps.latitude];\n  var scale = zoomToScale(endZoom - startZoom);\n  var startCenterXY = lngLatToWorld(startCenter);\n  var endCenterXY = lngLatToWorld(endCenter);\n  var uDelta = vec2.sub([], endCenterXY, startCenterXY);\n  var w0 = Math.max(startProps.width, startProps.height);\n  var w1 = w0 / scale;\n  var u1 = vec2.length(uDelta) * startScale;\n  var _u1 = Math.max(u1, EPSILON);\n  var rho2 = rho * rho;\n  var b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  var b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  var r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  var r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  var S = (r1 - r0) / rho;\n  return {\n    startZoom: startZoom,\n    startCenterXY: startCenterXY,\n    uDelta: uDelta,\n    w0: w0,\n    u1: u1,\n    S: S,\n    rho: rho,\n    rho2: rho2,\n    r0: r0,\n    r1: r1\n  };\n}","map":{"version":3,"names":["lerp","scaleToZoom","zoomToScale","lngLatToWorld","worldToLngLat","vec2","EPSILON","VIEWPORT_TRANSITION_PROPS","DEFAULT_OPTS","curve","speed","flyToViewport","startProps","endProps","t","options","_getFlyToTransitionPa","getFlyToTransitionParams","startZoom","startCenterXY","uDelta","w0","u1","S","rho","rho2","r0","viewport","_iterator","_createForOfIteratorHelper","_step","s","n","done","key","value","startValue","endValue","err","e","f","w","Math","cosh","u","tanh","sinh","scaleIncrement","newZoom","newCenterWorld","scale","add","newCenter","longitude","latitude","zoom","getFlyToDuration","opts","_objectSpread","screenSpeed","maxDuration","_getFlyToTransitionPa2","length","duration","Number","isFinite","Object","assign","startCenter","startScale","endZoom","endCenter","endCenterXY","sub","max","width","height","w1","_u1","b0","b1","log","sqrt","r1"],"sources":["../../src/fly-to-viewport.ts"],"sourcesContent":["import {lerp} from './math-utils';\nimport {scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport type {ViewportProps} from './normalize-viewport-props';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'] as const;\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\nexport type FlytoTransitionOptions = {\n  curve?: number;\n  speed?: number;\n  screenSpeed?: number;\n  maxDuration?: number;\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default function flyToViewport(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  t: number,\n  options?: FlytoTransitionOptions\n): {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n} {\n  // Equations from above paper are referred where needed.\n\n  const {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0} = getFlyToTransitionParams(\n    startProps,\n    endProps,\n    options\n  );\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    const viewport = {};\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    // @ts-expect-error properties are populated dynamically\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n\n  const newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  options?: FlytoTransitionOptions\n): number {\n  const opts = {...DEFAULT_OPTS, ...options};\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length = 1000 * S;\n  let duration: number;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  opts: FlytoTransitionOptions\n): {\n  startZoom: number;\n  startCenterXY: number[];\n  uDelta: number[];\n  w0: number;\n  u1: number;\n  S: number;\n  rho: number;\n  rho2: number;\n  r0: number;\n  r1: number;\n} {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter);\n  const endCenterXY = lngLatToWorld(endCenter);\n  const uDelta = vec2.sub([] as number[], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta) * startScale;\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}