{"ast":null,"code":"import _slicedToArray from \"/Users/vietle/Documents/personal-project/MyPersonalWebpage/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { createMat4, transformVector, clamp, log2 } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nexport var MAX_LATITUDE = 85.051129;\nexport var DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\nexport function lngLatToWorld(lngLat) {\n  var _lngLat = _slicedToArray(lngLat, 2),\n    lng = _lngLat[0],\n    lat = _lngLat[1];\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = TILE_SIZE * (lambda2 + PI) / (2 * PI);\n  var y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(xy) {\n  var _xy = _slicedToArray(xy, 2),\n    x = _xy[0],\n    y = _xy[1];\n  var lambda2 = x / TILE_SIZE * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(options) {\n  var latitude = options.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function unitsPerMeter(latitude) {\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\nexport function getDistanceScales(options) {\n  var latitude = options.latitude,\n    longitude = options.longitude,\n    _options$highPrecisio = options.highPrecision,\n    highPrecision = _options$highPrecisio === void 0 ? false : _options$highPrecisio;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n  var worldSize = TILE_SIZE;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var unitsPerDegreeX = worldSize / 360;\n  var unitsPerDegreeY = unitsPerDegreeX / latCosine;\n  var altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  var result = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;\n    var altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n    longitude = _lngLatZ[0],\n    latitude = _lngLatZ[1],\n    z0 = _lngLatZ[2];\n  var _xyz = _slicedToArray(xyz, 3),\n    x = _xyz[0],\n    y = _xyz[1],\n    z = _xyz[2];\n  var _getDistanceScales = getDistanceScales({\n      longitude: longitude,\n      latitude: latitude,\n      highPrecision: true\n    }),\n    unitsPerMeter = _getDistanceScales.unitsPerMeter,\n    unitsPerMeter2 = _getDistanceScales.unitsPerMeter2;\n  var worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n  var newLngLat = worldToLngLat(worldspace);\n  var newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(options) {\n  var height = options.height,\n    pitch = options.pitch,\n    bearing = options.bearing,\n    altitude = options.altitude,\n    scale = options.scale,\n    center = options.center;\n  var vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  var relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n  return vm;\n}\nexport function getProjectionParameters(options) {\n  var width = options.width,\n    height = options.height,\n    altitude = options.altitude,\n    _options$pitch = options.pitch,\n    pitch = _options$pitch === void 0 ? 0 : _options$pitch,\n    offset = options.offset,\n    center = options.center,\n    scale = options.scale,\n    _options$nearZMultipl = options.nearZMultiplier,\n    nearZMultiplier = _options$nearZMultipl === void 0 ? 1 : _options$nearZMultipl,\n    _options$farZMultipli = options.farZMultiplier,\n    farZMultiplier = _options$farZMultipli === void 0 ? 1 : _options$farZMultipli;\n  var _options$fovy = options.fovy,\n    fovy = _options$fovy === void 0 ? altitudeToFovy(DEFAULT_ALTITUDE) : _options$fovy;\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n  var fovRadians = fovy * DEGREES_TO_RADIANS;\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var focalDistance = fovyToAltitude(fovy);\n  var cameraToSeaLevelDistance = focalDistance;\n  if (center) {\n    cameraToSeaLevelDistance += center[2] * scale / Math.cos(pitchRadians) / height;\n  }\n  var fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n  var topHalfSurfaceDistance = Math.sin(fovAboveCenter) * cameraToSeaLevelDistance / Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n  var furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  var horizonDistance = cameraToSeaLevelDistance * 10;\n  var farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance: focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\nexport function getProjectionMatrix(options) {\n  var _getProjectionParamet = getProjectionParameters(options),\n    fov = _getProjectionParamet.fov,\n    aspect = _getProjectionParamet.aspect,\n    near = _getProjectionParamet.near,\n    far = _getProjectionParamet.far;\n  var projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n    x = _xyz2[0],\n    y = _xyz2[1],\n    _xyz2$ = _xyz2[2],\n    z = _xyz2$ === void 0 ? 0 : _xyz2$;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var _xyz3 = _slicedToArray(xyz, 3),\n    x = _xyz3[0],\n    y = _xyz3[1],\n    z = _xyz3[2];\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"names":["createMat4","transformVector","clamp","log2","mat4","vec2","vec3","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","MAX_LATITUDE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","lngLatToWorld","lngLat","_lngLat","_slicedToArray","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","xy","_xy","atan","exp","getMeterZoom","options","latitude","latCosine","cos","unitsPerMeter","getDistanceScales","longitude","_options$highPrecisio","highPrecision","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","result","metersPerUnit","unitsPerDegree","degreesPerUnit","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerDegree2","unitsPerMeter2","addMetersToLngLat","lngLatZ","xyz","_lngLatZ","z0","_xyz","z","_getDistanceScales","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","vm","translate","rotateX","rotateZ","relativeScale","negate","getProjectionParameters","width","_options$pitch","offset","_options$nearZMultipl","nearZMultiplier","_options$farZMultipli","farZMultiplier","_options$fovy","fovy","altitudeToFovy","undefined","fovRadians","pitchRadians","focalDistance","fovyToAltitude","cameraToSeaLevelDistance","fovAboveCenter","topHalfSurfaceDistance","sin","furthestDistance","horizonDistance","farZ","min","fov","aspect","near","far","getProjectionMatrix","_getProjectionParamet","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","_xyz2","_xyz2$","pixelsToWorld","pixelUnprojectionMatrix","targetZ","arguments","length","_xyz3","coord","coord0","coord1","z1","t","lerp"],"sources":["../../src/web-mercator-utils.ts"],"sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, clamp, log2} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\nexport type DistanceScales = {\n  unitsPerMeter: number[];\n  metersPerUnit: number[];\n  unitsPerMeter2?: number[];\n  unitsPerDegree: number[];\n  degreesPerUnit: number[];\n  unitsPerDegree2?: number[];\n};\n\n/**\n * PROJECTION MATRIX PARAMETERS\n *\n * TODO how to document mebers\n * @param fov in radians. fov is variable, depends on pitch and altitude\n * @param aspect width/height\n * @param focalDistance distance at which visual scale factor is 1\n * @param near near clipping plane\n * @param far far clipping plane\n */\ntype ProjectionParameters = {\n  fov: number;\n  aspect: number;\n  focalDistance: number;\n  near: number;\n  far: number;\n};\n\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom: number): number {\n  return Math.pow(2, zoom);\n}\n\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale: number): number {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat: number[]): [number, number] {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy: number[]): [number, number] {\n  const [x, y] = xy;\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options: {latitude: number}): number {\n  const {latitude} = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate the conversion from meter to common units at a given latitude\n * This is a cheaper version of `getDistanceScales`\n * @param latitude center latitude in degrees\n * @returns common units per meter\n */\nexport function unitsPerMeter(latitude: number): number {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options: {\n  latitude: number;\n  longitude: number;\n  highPrecision?: boolean;\n}): DistanceScales {\n  const {latitude, longitude, highPrecision = false} = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  const result: DistanceScales = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options: {\n  // Viewport props\n  height: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  // Pre-calculated parameters\n  scale: number;\n  center?: number[];\n}): number[] {\n  const {\n    // Viewport props\n    height,\n    pitch,\n    bearing,\n    altitude,\n    // Pre-calculated parameters\n    scale,\n    center\n  } = options;\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options: {\n  width: number;\n  height: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  pitch?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n}): ProjectionParameters {\n  const {\n    width,\n    height,\n    altitude,\n    pitch = 0,\n    offset,\n    center,\n    scale,\n    nearZMultiplier = 1,\n    farZMultiplier = 1\n  } = options;\n  let {fovy = altitudeToFovy(DEFAULT_ALTITUDE)} = options;\n\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  const fovRadians = fovy * DEGREES_TO_RADIANS;\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n\n  // Distance from camera to the target\n  const focalDistance = fovyToAltitude(fovy);\n\n  let cameraToSeaLevelDistance = focalDistance;\n\n  if (center) {\n    cameraToSeaLevelDistance += (center[2] * scale) / Math.cos(pitchRadians) / height;\n  }\n\n  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const topHalfSurfaceDistance =\n    (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /\n    Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n\n  // Calculate z distance of the farthest fragment that should be rendered.\n  const furthestDistance =\n    Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n  // Matches mapbox limit\n  const horizonDistance = cameraToSeaLevelDistance * 10;\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n\n  return {\n    fov: fovRadians,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ\n  };\n}\n\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options: {\n  width: number;\n  height: number;\n  pitch: number;\n  scale?: number;\n  center?: number[];\n  offset?: [number, number];\n  fovy?: number;\n  altitude?: number;\n  nearZMultiplier: number;\n  farZMultiplier: number;\n}): number[] {\n  const {fov, aspect, near, far} = getProjectionParameters(options);\n\n  const projectionMatrix = mat4.perspective(\n    [] as number[],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude: number): number {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy: number): number {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param pixelProjectionMatrix - projection matrix 4x4\n * @return [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[];\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[] {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(\n  xyz: number[],\n  pixelUnprojectionMatrix: number[],\n  targetZ: number = 0\n): number[] {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([] as number[], coord0, coord1, t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}