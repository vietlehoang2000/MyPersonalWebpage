{"ast":null,"code":"import _toConsumableArray from \"/Users/vietle/Documents/personal-project/MyPersonalWebpage/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/vietle/Documents/personal-project/MyPersonalWebpage/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/vietle/Documents/personal-project/MyPersonalWebpage/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/vietle/Documents/personal-project/MyPersonalWebpage/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createMat4 } from './math-utils';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, worldToPixels, altitudeToFovy, fovyToAltitude, DEFAULT_ALTITUDE, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport _fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nvar WebMercatorViewport = /*#__PURE__*/function () {\n  function WebMercatorViewport() {\n    var _this = this;\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 1,\n      height: 1\n    };\n    _classCallCheck(this, WebMercatorViewport);\n    _defineProperty(this, \"latitude\", void 0);\n    _defineProperty(this, \"longitude\", void 0);\n    _defineProperty(this, \"zoom\", void 0);\n    _defineProperty(this, \"pitch\", void 0);\n    _defineProperty(this, \"bearing\", void 0);\n    _defineProperty(this, \"altitude\", void 0);\n    _defineProperty(this, \"fovy\", void 0);\n    _defineProperty(this, \"meterOffset\", void 0);\n    _defineProperty(this, \"center\", void 0);\n    _defineProperty(this, \"width\", void 0);\n    _defineProperty(this, \"height\", void 0);\n    _defineProperty(this, \"scale\", void 0);\n    _defineProperty(this, \"distanceScales\", void 0);\n    _defineProperty(this, \"viewMatrix\", void 0);\n    _defineProperty(this, \"projectionMatrix\", void 0);\n    _defineProperty(this, \"viewProjectionMatrix\", void 0);\n    _defineProperty(this, \"pixelProjectionMatrix\", void 0);\n    _defineProperty(this, \"pixelUnprojectionMatrix\", void 0);\n    _defineProperty(this, \"equals\", function (viewport) {\n      if (!(viewport instanceof WebMercatorViewport)) {\n        return false;\n      }\n      return viewport.width === _this.width && viewport.height === _this.height && mat4.equals(viewport.projectionMatrix, _this.projectionMatrix) && mat4.equals(viewport.viewMatrix, _this.viewMatrix);\n    });\n    _defineProperty(this, \"project\", function (lngLatZ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$topLeft = options.topLeft,\n        topLeft = _options$topLeft === void 0 ? true : _options$topLeft;\n      var worldPosition = _this.projectPosition(lngLatZ);\n      var coord = worldToPixels(worldPosition, _this.pixelProjectionMatrix);\n      var _coord = _slicedToArray(coord, 2),\n        x = _coord[0],\n        y = _coord[1];\n      var y2 = topLeft ? y : _this.height - y;\n      return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    });\n    _defineProperty(this, \"unproject\", function (xyz) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$topLeft2 = options.topLeft,\n        topLeft = _options$topLeft2 === void 0 ? true : _options$topLeft2,\n        _options$targetZ = options.targetZ,\n        targetZ = _options$targetZ === void 0 ? undefined : _options$targetZ;\n      var _xyz = _slicedToArray(xyz, 3),\n        x = _xyz[0],\n        y = _xyz[1],\n        z = _xyz[2];\n      var y2 = topLeft ? y : _this.height - y;\n      var targetZWorld = targetZ && targetZ * _this.distanceScales.unitsPerMeter[2];\n      var coord = pixelsToWorld([x, y2, z], _this.pixelUnprojectionMatrix, targetZWorld);\n      var _this$unprojectPositi = _this.unprojectPosition(coord),\n        _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n        X = _this$unprojectPositi2[0],\n        Y = _this$unprojectPositi2[1],\n        Z = _this$unprojectPositi2[2];\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    });\n    _defineProperty(this, \"projectPosition\", function (xyz) {\n      var _lngLatToWorld = lngLatToWorld(xyz),\n        _lngLatToWorld2 = _slicedToArray(_lngLatToWorld, 2),\n        X = _lngLatToWorld2[0],\n        Y = _lngLatToWorld2[1];\n      var Z = (xyz[2] || 0) * _this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    });\n    _defineProperty(this, \"unprojectPosition\", function (xyz) {\n      var _worldToLngLat = worldToLngLat(xyz),\n        _worldToLngLat2 = _slicedToArray(_worldToLngLat, 2),\n        X = _worldToLngLat2[0],\n        Y = _worldToLngLat2[1];\n      var Z = (xyz[2] || 0) * _this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    });\n    var width = props.width,\n      height = props.height,\n      _props$altitude = props.altitude,\n      altitude = _props$altitude === void 0 ? null : _props$altitude,\n      _props$fovy = props.fovy,\n      fovy = _props$fovy === void 0 ? null : _props$fovy;\n    var _props$latitude = props.latitude,\n      latitude = _props$latitude === void 0 ? 0 : _props$latitude,\n      _props$longitude = props.longitude,\n      longitude = _props$longitude === void 0 ? 0 : _props$longitude,\n      _props$zoom = props.zoom,\n      zoom = _props$zoom === void 0 ? 0 : _props$zoom,\n      _props$pitch = props.pitch,\n      pitch = _props$pitch === void 0 ? 0 : _props$pitch,\n      _props$bearing = props.bearing,\n      bearing = _props$bearing === void 0 ? 0 : _props$bearing,\n      _props$position = props.position,\n      position = _props$position === void 0 ? null : _props$position,\n      _props$nearZMultiplie = props.nearZMultiplier,\n      nearZMultiplier = _props$nearZMultiplie === void 0 ? 0.02 : _props$nearZMultiplie,\n      _props$farZMultiplier = props.farZMultiplier,\n      farZMultiplier = _props$farZMultiplier === void 0 ? 1.01 : _props$farZMultiplier;\n    width = width || 1;\n    height = height || 1;\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n    var scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    var distanceScales = getDistanceScales({\n      longitude: longitude,\n      latitude: latitude\n    });\n    var center = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n    this.projectionMatrix = getProjectionMatrix({\n      width: width,\n      height: height,\n      scale: scale,\n      center: center,\n      pitch: pitch,\n      fovy: fovy,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    });\n    this.viewMatrix = getViewMatrix({\n      height: height,\n      scale: scale,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude\n    });\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n    this.distanceScales = distanceScales;\n    this._initMatrices();\n    Object.freeze(this);\n  }\n  _createClass(WebMercatorViewport, [{\n    key: \"_initMatrices\",\n    value: function _initMatrices() {\n      var width = this.width,\n        height = this.height,\n        projectionMatrix = this.projectionMatrix,\n        viewMatrix = this.viewMatrix;\n      var vpm = createMat4();\n      mat4.multiply(vpm, vpm, projectionMatrix);\n      mat4.multiply(vpm, vpm, viewMatrix);\n      this.viewProjectionMatrix = vpm;\n      var m = createMat4();\n      mat4.scale(m, m, [width / 2, -height / 2, 1]);\n      mat4.translate(m, m, [1, -1, 0]);\n      mat4.multiply(m, m, vpm);\n      var mInverse = mat4.invert(createMat4(), m);\n      if (!mInverse) {\n        throw new Error('Pixel project matrix not invertible');\n      }\n      this.pixelProjectionMatrix = m;\n      this.pixelUnprojectionMatrix = mInverse;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat) {\n      return lngLatToWorld(lngLat);\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xy) {\n      return worldToLngLat(xy);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref) {\n      var lngLat = _ref.lngLat,\n        pos = _ref.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = lngLatToWorld(lngLat);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return worldToLngLat(newCenter);\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n        height = this.height;\n      var _fitBounds2 = _fitBounds(Object.assign({\n          width: width,\n          height: height,\n          bounds: bounds\n        }, options)),\n        longitude = _fitBounds2.longitude,\n        latitude = _fitBounds2.latitude,\n        zoom = _fitBounds2.zoom;\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(options) {\n      var corners = this.getBoundingRegion(options);\n      var west = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var east = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var south = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      var north = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      return [[west, south], [east, north]];\n    }\n  }, {\n    key: \"getBoundingRegion\",\n    value: function getBoundingRegion() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return getBounds(this, options.z || 0);\n    }\n  }, {\n    key: \"getLocationAtPoint\",\n    value: function getLocationAtPoint(_ref2) {\n      var lngLat = _ref2.lngLat,\n        pos = _ref2.pos;\n      return this.getMapCenterByLngLatPosition({\n        lngLat: lngLat,\n        pos: pos\n      });\n    }\n  }]);\n  return WebMercatorViewport;\n}();\nexport { WebMercatorViewport as default };","map":{"version":3,"names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","altitudeToFovy","fovyToAltitude","DEFAULT_ALTITUDE","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","_this","props","arguments","length","undefined","width","height","_classCallCheck","_defineProperty","viewport","equals","projectionMatrix","viewMatrix","lngLatZ","options","_options$topLeft","topLeft","worldPosition","projectPosition","coord","pixelProjectionMatrix","_coord","_slicedToArray","x","y","y2","xyz","_options$topLeft2","_options$targetZ","targetZ","_xyz","z","targetZWorld","distanceScales","unitsPerMeter","pixelUnprojectionMatrix","_this$unprojectPositi","unprojectPosition","_this$unprojectPositi2","X","Y","Z","Number","isFinite","_lngLatToWorld","_lngLatToWorld2","_worldToLngLat","_worldToLngLat2","metersPerUnit","_props$altitude","altitude","_props$fovy","fovy","_props$latitude","latitude","_props$longitude","longitude","_props$zoom","zoom","_props$pitch","pitch","_props$bearing","bearing","_props$position","position","_props$nearZMultiplie","nearZMultiplier","_props$farZMultiplier","farZMultiplier","scale","Math","max","center","push","add","mul","meterOffset","_initMatrices","Object","freeze","_createClass","key","value","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","_ref","pos","fromLocation","toLocation","negate","newCenter","bounds","_fitBounds2","assign","corners","getBoundingRegion","west","min","apply","_toConsumableArray","map","p","east","south","north","getLocationAtPoint","_ref2","default"],"sources":["../../src/web-mercator-viewport.ts"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix,\n  DistanceScales\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport type {FitBoundsOptions} from './fit-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\n/**\n   * @param width=1 - Width of \"viewport\" or window\n   * @param height=1 - Height of \"viewport\" or window\n   * @param scale=1 - Either use scale or zoom\n   * @param pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param fovy= - Field of view of camera in degrees\n   * @param altitude= - Altitude of camera in screen units                                                               \n   *\n   * Web mercator projection short-hand parameters\n   * @param latitude - Center of viewport on map\n   * @param longitude - Center of viewport on map\n   * @param zoom - Scale = Math.pow(2,zoom) on map\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - Field of view is independent from altitude, provide `altitudeToFovy(1.5)` (default value) to match assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n */\nexport type WebMercatorViewportProps = {\n  // Map state\n  width: number;\n  height: number;\n  latitude?: number;\n  longitude?: number;\n  position?: number[];\n  zoom?: number;\n  pitch?: number;\n  bearing?: number;\n  altitude?: number;\n  fovy?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n};\n\n/**\n * The WebMercatorViewport class creates\n * - view/projection matrices\n * - \"uniform values\" (for shaders) from mercator params\n *\n * Note: Instances are immutable in the sense that they only have accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport default class WebMercatorViewport {\n  readonly latitude: number;\n  readonly longitude: number;\n  readonly zoom: number;\n  readonly pitch: number;\n  readonly bearing: number;\n  readonly altitude: number;\n  readonly fovy: number;\n\n  readonly meterOffset: number[];\n  readonly center: number[];\n\n  readonly width: number;\n  readonly height: number;\n  readonly scale: number;\n  readonly distanceScales: DistanceScales;\n\n  readonly viewMatrix: number[];\n  readonly projectionMatrix: number[];\n\n  viewProjectionMatrix: number[];\n  pixelProjectionMatrix: number[];\n  pixelUnprojectionMatrix: number[];\n\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(props: WebMercatorViewportProps = {width: 1, height: 1}) {\n    let {\n      // Map state\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center: number[] = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      scale,\n      center,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _initMatrices(): void {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  /** Two viewports are equal if width and height are identical, and if\n   * their view and projection matrices are (approximately) equal.\n   */\n  equals = (viewport: WebMercatorViewport | null): boolean => {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  };\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @return - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project = (lngLatZ: number[], options: {topLeft?: boolean} = {}): number[] => {\n    const {topLeft = true} = options;\n    const worldPosition = this.projectPosition(lngLatZ);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  };\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates, possibly `[lon, lat]` on map.\n   *\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   *\n   * @param xyz - screen coordinates, z as pixel depth\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @param options.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject = (xyz: number[], options: {topLeft?: boolean; targetZ?: number} = {}): number[] => {\n    const {topLeft = true, targetZ = undefined} = options;\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  };\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  };\n\n  unprojectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  };\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return [x,y] coordinates.\n   */\n  projectFlat(lngLat: number[]): number[] {\n    return lngLatToWorld(lngLat);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param xy - array with [x,y] members\n   *  representing point on projected map plane\n   * @return - array with [lat,lon] of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy: number[]): number[] {\n    return worldToLngLat(xy);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n   * @param opt\n   * @param opt.lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param opt.pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param bounds - [[lon, lat], [lon, lat]]\n   * @param [options]\n   * @param [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(\n    bounds: [[number, number], [number, number]],\n    options: Omit<FitBoundsOptions, 'width' | 'height' | 'bounds'> = {}\n  ): WebMercatorViewport {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} bounds - [[lon, lat], [lon, lat]]\n   */\n  getBounds(options?: {z?: number}): number[][] {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} an array of 4 points that define the visible region\n   */\n  getBoundingRegion(options: {z?: number} = {}): number[][] {\n    return getBounds(this, options.z || 0);\n  }\n\n  // DEPRECATED\n\n  /** @deprecated Legacy method name */\n  getLocationAtPoint({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}